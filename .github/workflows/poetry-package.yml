name: Python package

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

env:
  LATEST_PY_VERSION: '3.10'

jobs:
  check:

    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
      matrix:
        python-version: ["3.6", "3.10"]

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
    - uses: snok/install-poetry@v1.3
      with:
        virtualenvs-in-project: true

    # Cache packages per python version, and reuse until lockfile changes
    - name: Cache python packages
      id: cache
      uses: actions/cache@v3
      with:
        path: .venv
        key: venv-${{ matrix.python-version }}-latest-${{ hashFiles('poetry.lock') }}
    - name: Install dependencies
      if: steps.cache.outputs.cache-hit != 'true'
      run: poetry install -v

    # Run linting, tests, and coverage
    - name: Lint
      run: |
        source $VENV
        nox -e lint
    - name: Test and Coverage
      run: |
        source $VENV
        nox -e cover

    # Latest python version: send coverage report to codecov
    - name: "Upload coverage report to Codecov"
      if: ${{ matrix.python-version == env.LATEST_PY_VERSION }}
      uses: codecov/codecov-action@v2


  publish:

    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'
    strategy:
      fail-fast: true
      matrix:
        python-version: ["3.6"]

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install poetry
        poetry install
    - name: Publish
      run: |
        poetry config http-basic.pypi ${{ secrets.PYPI_USERNAME }} ${{ secrets.PYPI_PASSWORD }}
        poetry build -f sdist
        poetry publish
